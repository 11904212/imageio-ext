Index: swig/java/build.xml
===================================================================
--- swig/java/build.xml	(revision 19614)
+++ swig/java/build.xml	(working copy)
@@ -6,7 +6,7 @@
 	<target name="compile" description="Compile the source files.">
 		<mkdir dir="build/classes"/>
 		<javac srcdir="org" destdir="build/classes" 
-		       debug="on" source="1.4" target="1.4"
+		       debug="on" source="1.5" target="1.5"
 		       includeantruntime="false" deprecation="true">
 		</javac>
 		<echo>compilation complete</echo>
@@ -23,7 +23,7 @@
 	<target name="compile_tests" depends="archive" description="Compile the tests files.">
 		<mkdir dir="build/apps"/>
 		<javac srcdir="apps" destdir="build/apps" 
-		       debug="on" source="1.4" target="1.4"
+		       debug="on" source="1.5" target="1.5"
 		       includeantruntime="false" deprecation="true" classpath="gdal.jar">
 		</javac>
 		<echo>compilation of tests complete</echo>
Index: swig/java/apps/gdalinfo.java
===================================================================
--- swig/java/apps/gdalinfo.java	(revision 19614)
+++ swig/java/apps/gdalinfo.java	(working copy)
@@ -31,18 +31,18 @@
  ****************************************************************************/
 
 
-import java.util.Enumeration;
-import java.util.Hashtable;
-import java.util.Vector;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
 
 import org.gdal.gdal.Band;
 import org.gdal.gdal.ColorTable;
 import org.gdal.gdal.Dataset;
 import org.gdal.gdal.Driver;
 import org.gdal.gdal.GCP;
+import org.gdal.gdal.RasterAttributeTable;
+import org.gdal.gdal.TermProgressCallback;
 import org.gdal.gdal.gdal;
-import org.gdal.gdal.TermProgressCallback;
-import org.gdal.gdal.RasterAttributeTable;
 import org.gdal.gdalconst.gdalconstConstants;
 import org.gdal.osr.CoordinateTransformation;
 import org.gdal.osr.SpatialReference;
@@ -73,16 +73,16 @@
 			int i, iBand;
 			double[] adfGeoTransform = new double[6];
 			Driver hDriver;
-			Vector papszMetadata;
-			boolean bComputeMinMax = false, bSample = false;
+			List<String> papszMetadata;
+			boolean bComputeMinMax = false;
 			boolean bShowGCPs = true, bShowMetadata = true;
 			boolean bStats = false, bApproxStats = true;
                         boolean bShowColorTable = true, bComputeChecksum = false;
                         boolean bReportHistograms = false;
                         boolean bShowRAT = true;
 			String pszFilename = null;
-                        Vector papszFileList;
-                        Vector papszExtraMDDomains = new Vector();
+                        List<String> papszFileList;
+                        List<String> papszExtraMDDomains = new ArrayList<String>();
 
 			gdal.AllRegister();
 
@@ -121,7 +121,7 @@
                                 else if (args[i].equals("-checksum"))
 					bComputeChecksum = true;
                                 else if (args[i].equals("-mdd") && i + 1 < args.length)
-					papszExtraMDDomains.addElement(args[++i]);
+					papszExtraMDDomains.add(args[++i]);
 				else if (args[i].startsWith("-"))
 					Usage();
 				else if (pszFilename == null)
@@ -165,10 +165,10 @@
                         }
                         else
                         {
-                            Enumeration e = papszFileList.elements();
-                            System.out.println( "Files: " + (String)e.nextElement() );
-                            while(e.hasMoreElements())
-                                System.out.println( "       " +  (String)e.nextElement() );
+                            Iterator it = papszFileList.iterator();
+                            System.out.println( "Files: " + (String)it.next() );
+                            while(it.hasNext())
+                                System.out.println( "       " +  (String)it.next());
                         }
 
 			System.out.println("Size is " + hDataset.getRasterXSize() + ", "
@@ -226,12 +226,12 @@
 						+ hDataset.GetGCPProjection());
 
 				int count = 0;
-				Vector GCPs = new Vector();
+				List<GCP> GCPs = new ArrayList<GCP>();
 				hDataset.GetGCPs(GCPs);
 
-				Enumeration e = GCPs.elements();
-				while (e.hasMoreElements()) {
-					GCP gcp = (GCP) e.nextElement();
+				Iterator<GCP> it = GCPs.iterator();
+				while (it.hasNext()) {
+					GCP gcp = it.next();
 					System.out.println("GCP[" + (count++) + "]: Id="
 							+ gcp.getId() + ", Info=" + gcp.getInfo());
 					System.out.println("    (" + gcp.getGCPPixel() + ","
@@ -246,24 +246,24 @@
 			/* -------------------------------------------------------------------- */
 			papszMetadata = hDataset.GetMetadata_List("");
 			if (bShowMetadata && papszMetadata.size() > 0) {
-				Enumeration keys = papszMetadata.elements();
+				Iterator<String> keys = papszMetadata.iterator();
 				System.out.println("Metadata:");
-				while (keys.hasMoreElements()) {
-					System.out.println("  " + (String) keys.nextElement());
+				while (keys.hasNext()) {
+					System.out.println("  " + (String) keys.next());
 				}
 			}
                         
-                        Enumeration eExtraMDDDomains = papszExtraMDDomains.elements();
-                        while(eExtraMDDDomains.hasMoreElements())
+                        Iterator<String> eExtraMDDDomains = papszExtraMDDomains.iterator();
+                        while(eExtraMDDDomains.hasNext())
                         {
-                            String pszDomain = (String)eExtraMDDDomains.nextElement();
+                            String pszDomain = eExtraMDDDomains.next();
                             papszMetadata = hDataset.GetMetadata_List(pszDomain);
                             if( bShowMetadata && papszMetadata.size() > 0 )
                             {
-                                Enumeration keys = papszMetadata.elements();
+                                Iterator<String> keys = papszMetadata.iterator();
                                 System.out.println("Metadata (" + pszDomain + "):");
-                                while (keys.hasMoreElements()) {
-					System.out.println("  " + (String) keys.nextElement());
+                                while (keys.hasNext()) {
+					System.out.println("  " + (String) keys.next());
 				}
                             }
                         }
@@ -272,10 +272,10 @@
                         /* -------------------------------------------------------------------- */
                         papszMetadata = hDataset.GetMetadata_List("IMAGE_STRUCTURE" );
                         if( bShowMetadata && papszMetadata.size() > 0) {
-				Enumeration keys = papszMetadata.elements();
+                            Iterator keys = papszMetadata.iterator();
 				System.out.println("Image Structure Metadata:");
-				while (keys.hasMoreElements()) {
-					System.out.println("  " + (String) keys.nextElement());
+				while (keys.hasNext()) {
+					System.out.println("  " + (String) keys.next());
 				}
 			}
 			/* -------------------------------------------------------------------- */
@@ -284,9 +284,9 @@
 			papszMetadata = hDataset.GetMetadata_List("SUBDATASETS");
 			if (papszMetadata.size() > 0) {
 				System.out.println("Subdatasets:");
-				Enumeration keys = papszMetadata.elements();
-				while (keys.hasMoreElements()) {
-					System.out.println("  " + (String) keys.nextElement());
+				Iterator keys = papszMetadata.iterator();
+				while (keys.hasNext()) {
+					System.out.println("  " + (String) keys.next());
 				}
 			}
                     
@@ -296,9 +296,9 @@
                         papszMetadata = hDataset.GetMetadata_List("GEOLOCATION" );
                         if (papszMetadata.size() > 0) {
                             System.out.println( "Geolocation:" );
-                            Enumeration keys = papszMetadata.elements();
-                            while (keys.hasMoreElements()) {
-                                    System.out.println("  " + (String) keys.nextElement());
+                            Iterator keys = papszMetadata.iterator();
+                            while (keys.hasNext()) {
+                                    System.out.println("  " + (String) keys.next());
                             }
                         }
                     
@@ -308,9 +308,9 @@
                         papszMetadata = hDataset.GetMetadata_List("RPC" );
                         if (papszMetadata.size() > 0) {
                             System.out.println( "RPC Metadata:" );
-                            Enumeration keys = papszMetadata.elements();
-                            while (keys.hasMoreElements()) {
-                                    System.out.println("  " + (String) keys.nextElement());
+                            Iterator keys = papszMetadata.iterator();
+                            while (keys.hasNext()) {
+                                    System.out.println("  " + (String) keys.next());
                             }
                         }
 
@@ -508,14 +508,14 @@
 				     System.out.println( "  Unit Type: " + hBand.GetUnitType() );
 				}
 
-                                Vector papszCategories = hBand.GetRasterCategoryNames();
+                                List<String> papszCategories = hBand.GetRasterCategoryNames();
                                 if (papszCategories.size() > 0)
                                 {
                                     System.out.println( "  Categories:" );
-                                    Enumeration eCategories = papszCategories.elements();
+                                    Iterator<String> eCategories = papszCategories.iterator();
                                     i = 0;
-				    while (eCategories.hasMoreElements()) {
-                                            System.out.println("    " + i + ": " + (String) eCategories.nextElement());
+				    while (eCategories.hasNext()) {
+                                            System.out.println("    " + i + ": " + eCategories.next());
                                             i ++;
                                     }
                                 }
@@ -531,10 +531,10 @@
 
 				papszMetadata = hBand.GetMetadata_List("");
 				 if( bShowMetadata && papszMetadata.size() > 0 ) {
-						Enumeration keys = papszMetadata.elements();
+						Iterator<String> keys = papszMetadata.iterator();
 						System.out.println("  Metadata:");
-						while (keys.hasMoreElements()) {
-							System.out.println("    " + (String) keys.nextElement());
+						while (keys.hasNext()) {
+							System.out.println("    " + (String) keys.next());
 						}
 				 }
 				if (hBand.GetRasterColorInterpretation() == gdalconstConstants.GCI_PaletteIndex
Index: swig/java/apps/GDALtest.java
===================================================================
--- swig/java/apps/GDALtest.java	(revision 19614)
+++ swig/java/apps/GDALtest.java	(working copy)
@@ -33,9 +33,10 @@
 import java.io.File;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
-import java.util.Enumeration;
-import java.util.Hashtable;
-import java.util.Vector;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
 
 import javax.swing.ImageIcon;
 import javax.swing.JButton;
@@ -125,28 +126,28 @@
 			System.out.println("Projection is `" + poDataset.GetProjectionRef()
 					+ "'");
 		
-		Hashtable dict = poDataset.GetMetadata_Dict("");
-		Enumeration keys = dict.keys();
+		HashMap<String,String> dict = poDataset.GetMetadata_Dict("");
+		Iterator<String> keys = dict.keySet().iterator();
 		System.out.println(dict.size() + " items of metadata found (via Hashtable dict):");
-		while(keys.hasMoreElements()) {
-			String key = (String)keys.nextElement();
+		while(keys.hasNext()) {
+			String key = keys.next();
 			System.out.println(" :" + key + ":==:" + dict.get(key) + ":");
 		}
 
-		Vector list = poDataset.GetMetadata_List("");
-		Enumeration enumerate = list.elements();
+		List<String> list = poDataset.GetMetadata_List("");
+		Iterator<String> iterator = list.iterator();
 		System.out.println(list.size() + " items of metadata found (via Vector list):");
-		while(enumerate.hasMoreElements()) {
-			String s = (String)enumerate.nextElement();
+		while(iterator.hasNext()) {
+			String s = (String)iterator.next();
 			System.out.println(" " + s);
 		}
 		
-		Vector GCPs = new Vector();
+		List<GCP> GCPs = new ArrayList<GCP>();
 		poDataset.GetGCPs(GCPs);
 		System.out.println("Got " + GCPs.size() + " GCPs");
-		Enumeration e = GCPs.elements();
-		while(e.hasMoreElements()) {
-			GCP gcp = (GCP)e.nextElement();
+		Iterator<GCP> it = GCPs.iterator();
+		while(it.hasNext()) {
+			GCP gcp = it.next();
 			System.out.println(" x:" + gcp.getGCPX() +
 					" y:" + gcp.getGCPY() +
 					" z:" + gcp.getGCPZ() +
Index: swig/java/apps/gdalmajorobject.java
===================================================================
--- swig/java/apps/gdalmajorobject.java	(revision 19614)
+++ swig/java/apps/gdalmajorobject.java	(working copy)
@@ -28,11 +28,12 @@
  * DEALINGS IN THE SOFTWARE.
  *****************************************************************************/
 
+import java.util.HashMap;
+import java.util.List;
+
+import org.gdal.gdal.Dataset;
+import org.gdal.gdal.Driver;
 import org.gdal.gdal.gdal;
-import org.gdal.gdal.Driver;
-import org.gdal.gdal.Dataset;
-import java.util.Vector;
-import java.util.Hashtable;
 
 public class gdalmajorobject
 {
@@ -50,11 +51,11 @@
         if (!ds.GetMetadataItem("key").equals("value"))
             throw new RuntimeException();
 
-        Vector v = ds.GetMetadata_List();
-        if (!((String)v.elementAt(0)).equals("key=value"))
+        List<String> v = ds.GetMetadata_List();
+        if (!(v.get(0)).equals("key=value"))
             throw new RuntimeException();
 
-        Hashtable h = ds.GetMetadata_Dict();
+        HashMap<String,String> h = ds.GetMetadata_Dict();
         if (!h.get("key").equals("value"))
             throw new RuntimeException();
 
@@ -68,7 +69,7 @@
         ds.delete();
         ds = memDriver.Create("mem", 1, 1);
 
-        h = new Hashtable();
+        h = new HashMap<String, String>();
         h.put("key", "value");
         ds.SetMetadata(h);
         if (!ds.GetMetadataItem("key").equals("value"))
Index: swig/include/java/gdal_java.i
===================================================================
--- swig/include/java/gdal_java.i	(revision 19614)
+++ swig/include/java/gdal_java.i	(working copy)
@@ -52,18 +52,18 @@
 
     public static String[] GeneralCmdLineProcessor(String[] args, int nOptions)
     {
-        java.util.Vector vArgs = new java.util.Vector();
+        java.util.List<String> vArgs = new java.util.ArrayList<String>();
         int i;
         for(i=0;i<args.length;i++)
-            vArgs.addElement(args[i]);
+            vArgs.add(args[i]);
 
         vArgs = GeneralCmdLineProcessor(vArgs, nOptions);
-        java.util.Enumeration eArgs = vArgs.elements();
-        args = new String[vArgs.size()];
+        int size = vArgs.size();
+        args = new String[size];
         i = 0;
-        while(eArgs.hasMoreElements())
+        while(i < size)
         {
-            String arg = (String)eArgs.nextElement();
+            String arg = (String) vArgs.get(i);
             args[i++] = arg;
         }
 
@@ -104,44 +104,48 @@
 
 
 %typemap(javaimports) GDALDriverShadow %{
-import java.util.Vector;
+import java.util.List;
+import java.util.ArrayList;
 import org.gdal.gdalconst.gdalconstConstants;
 %}
 
 %typemap(javacode) GDALDriverShadow %{
 
-  private static Vector StringArrayToVector(String[] options)
+  private static List<String> StringArrayToList(String[] options)
   {
       if (options == null)
         return null;
-      Vector v = new Vector();
+      ArrayList<String> v = new ArrayList<String>();
       for(int i=0;i<options.length;i++)
-        v.addElement(options[i]);
+        v.add(options[i]);
       return v;
   }
 
   public Dataset Create(String name, int xsize, int ysize, int bands, int eType, String[] options) {
-    return Create(name, xsize, ysize, bands, eType, StringArrayToVector(options));
+    return Create(name, xsize, ysize, bands, eType, StringArrayToList(options));
   }
 
   public Dataset Create(String name, int xsize, int ysize, int bands, String[] options) {
-    return Create(name, xsize, ysize, bands, gdalconstConstants.GDT_Byte, StringArrayToVector(options));
+    return Create(name, xsize, ysize, bands, gdalconstConstants.GDT_Byte, StringArrayToList(options));
   }
 
   public Dataset CreateCopy(String name, Dataset src, int strict, String[] options) {
-    return CreateCopy(name, src, strict, StringArrayToVector(options), null);
+    return CreateCopy(name, src, strict, StringArrayToList(options), null);
   }
 
-  public Dataset CreateCopy(String name, Dataset src, Vector options) {
+  public Dataset CreateCopy(String name, Dataset src, java.util.List<String> options) {
     return CreateCopy(name, src, 1, options, null);
   }
 
   public Dataset CreateCopy(String name, Dataset src, String[] options) {
-    return CreateCopy(name, src, 1, StringArrayToVector(options), null);
+    return CreateCopy(name, src, 1, StringArrayToList(options), null);
   }
 
 %}
 
+%typemap(javaimports) GDALDatasetShadow %{
+import org.gdal.gdal.GCP;
+%}
 
 %typemap(javacode) GDALDatasetShadow %{
 
@@ -162,8 +166,8 @@
     return BuildOverviews(null, overviewlist, null);
   }
 
-  public java.util.Vector GetGCPs() {
-      java.util.Vector gcps = new java.util.Vector();
+  public java.util.List<GCP> GetGCPs() {
+      java.util.ArrayList<GCP> gcps = new java.util.ArrayList<GCP>();
       GetGCPs(gcps);
       return gcps;
   }
@@ -892,21 +896,23 @@
   }
 
   /* For backward compatibilty */
-  public int SetMetadata(java.util.Hashtable metadata, String domain)
+  public int SetMetadata(java.util.HashMap<String,String> metadata, String domain)
   {
       if (metadata == null)
-          return SetMetadata((java.util.Vector)null, domain);
-      java.util.Vector v = new java.util.Vector();
-      java.util.Enumeration values = metadata.elements();
-      java.util.Enumeration keys = metadata.keys();
-      while(keys.hasMoreElements())
+          return SetMetadata((java.util.ArrayList<String>)null, domain);
+      java.util.ArrayList<String> list = new java.util.ArrayList<String>();
+      java.util.Set<String> keys = metadata.keySet();
+      java.util.Iterator<String> iterator = keys.iterator();
+      while(iterator.hasNext())
       {
-          v.add((String)keys.nextElement() + "=" + (String)values.nextElement());
+          String key = iterator.next();		
+          String value = metadata.get(key);
+          list.add(key + "=" + value);
       }
-      return SetMetadata(v, domain);
+      return SetMetadata(list, domain);
   }
 
-  public int SetMetadata(java.util.Hashtable metadata)
+  public int SetMetadata(java.util.HashMap<String,String> metadata)
   {
       return SetMetadata(metadata, null);
   }
Index: swig/include/java/ogr_java_extend.i
===================================================================
--- swig/include/java/ogr_java_extend.i	(revision 19614)
+++ swig/include/java/ogr_java_extend.i	(working copy)
@@ -22,18 +22,18 @@
 
     public static String[] GeneralCmdLineProcessor(String[] args, int nOptions)
     {
-        java.util.Vector vArgs = new java.util.Vector();
+        java.util.List<String> vArgs = new java.util.ArrayList<String>();
         int i;
         for(i=0;i<args.length;i++)
-            vArgs.addElement(args[i]);
+            vArgs.add(args[i]);
 
         vArgs = GeneralCmdLineProcessor(vArgs, nOptions);
-        java.util.Enumeration eArgs = vArgs.elements();
-        args = new String[vArgs.size()];
+        int size = vArgs.size();
+        args = new String[size];
         i = 0;
-        while(eArgs.hasMoreElements())
+        while(i < size)
         {
-            String arg = (String)eArgs.nextElement();
+            String arg = (String) vArgs.get(i);
             args[i++] = arg;
         }
 
Index: swig/include/java/typemaps_java.i
===================================================================
--- swig/include/java/typemaps_java.i	(revision 19614)
+++ swig/include/java/typemaps_java.i	(working copy)
@@ -221,8 +221,8 @@
 {
   /* %typemap(argout) (int *nGCPs, GDAL_GCP const **pGCPs ) */
   const jclass GCPClass = jenv->FindClass("org/gdal/gdal/GCP");
-  const jclass vectorClass = jenv->FindClass("java/util/Vector");
-  const jmethodID add = jenv->GetMethodID(vectorClass, "add", "(Ljava/lang/Object;)Z");
+  const jclass ListClass = jenv->FindClass("java/util/ArrayList");
+  const jmethodID add = jenv->GetMethodID(ListClass, "add", "(Ljava/lang/Object;)Z");
   const jmethodID GCPcon = jenv->GetMethodID(GCPClass, "<init>",
     "(DDDDDLjava/lang/String;Ljava/lang/String;)V");
 
@@ -244,8 +244,8 @@
 }
 
 %typemap(jni) (int *nGCPs, GDAL_GCP const **pGCPs ) "jobject"
-%typemap(jtype) (int *nGCPs, GDAL_GCP const **pGCPs ) "java.util.Vector"
-%typemap(jstype) (int *nGCPs, GDAL_GCP const **pGCPs ) "java.util.Vector"
+%typemap(jtype) (int *nGCPs, GDAL_GCP const **pGCPs ) "java.util.List"
+%typemap(jstype) (int *nGCPs, GDAL_GCP const **pGCPs ) "java.util.List"
 %typemap(javain) (int *nGCPs, GDAL_GCP const **pGCPs ) "$javainput"
 %typemap(javaout) (int *nGCPs, GDAL_GCP const **pGCPs ) {
     return $jnicall;
@@ -848,21 +848,21 @@
   }
 
 /***************************************************
- * Typemaps converts the Hashtable to a char array *
+ * Typemaps converts the HashMap to a char array *
  ***************************************************/
 
 %typemap(in) char **dict
 {
   /* %typemap(in) char **dict */
-  /* Convert the Hashtable to a char array */
+  /* Convert the HashMap to a char array */
   $1 = NULL;
   if($input != 0) {
-    const jclass hashtable = jenv->FindClass("java/util/Hashtable");
+    const jclass hashMap = jenv->FindClass("java/util/HashMap");
     const jclass enumeration = jenv->FindClass("java/util/Enumeration");
     const jclass stringClass = jenv->FindClass("java/lang/String");
-    const jmethodID get = jenv->GetMethodID(hashtable, "get",
+    const jmethodID get = jenv->GetMethodID(hashMap, "get",
       "(Ljava/lang/Object;)Ljava/lang/Object;");
-    const jmethodID keys = jenv->GetMethodID(hashtable, "keys",
+    const jmethodID keys = jenv->GetMethodID(hashMap, "keys",
       "()Ljava/util/Enumeration;");
     const jmethodID hasMoreElements = jenv->GetMethodID(enumeration, 
       "hasMoreElements", "()Z");
@@ -874,14 +874,14 @@
       if (key == NULL || !jenv->IsInstanceOf(key, stringClass))
       {
           CSLDestroy($1);
-          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "a key in the hashtable is not a string");
+          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "a key in the HashMap is not a string");
           return $null;
       }
       jstring value = (jstring)jenv->CallObjectMethod($input, get, key);
       if (value != NULL && !jenv->IsInstanceOf(value, stringClass))
       {
           CSLDestroy($1);
-          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "a value in the hashtable is not a string");
+          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "a value in the HashMap is not a string");
           return $null;
       }
       const char *keyptr = jenv->GetStringUTFChars(key, 0);
@@ -896,13 +896,13 @@
 %typemap(out) char **dict
 {
   /* %typemap(out) char ** -> to hash */
-  /* Convert a char array to a Hashtable */
+  /* Convert a char array to a HashMap */
   char **stringarray = $1;
-  const jclass hashtable = jenv->FindClass("java/util/Hashtable");
-  const jmethodID constructor = jenv->GetMethodID(hashtable, "<init>", "()V");
-  const jmethodID put = jenv->GetMethodID(hashtable, "put",
+  const jclass hashMap = jenv->FindClass("java/util/HashMap");
+  const jmethodID constructor = jenv->GetMethodID(hashMap, "<init>", "()V");
+  const jmethodID put = jenv->GetMethodID(hashMap, "put",
     "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
-  $result = jenv->NewObject(hashtable, constructor);
+  $result = jenv->NewObject(hashMap, constructor);
   if ( stringarray != NULL ) {
     while (*stringarray != NULL ) {
       char const *valptr;
@@ -931,8 +931,8 @@
 }
 
 %typemap(jni) (char **dict) "jobject"
-%typemap(jtype) (char **dict) "java.util.Hashtable"
-%typemap(jstype) (char **dict) "java.util.Hashtable"
+%typemap(jtype) (char **dict) "java.util.HashMap"
+%typemap(jstype) (char **dict) "java.util.HashMap"
 %typemap(javain) (char **dict) "$javainput"
 %typemap(javaout) (char **dict) {
     return $jnicall;
@@ -941,7 +941,7 @@
 
 
 /***************************************************
- * Typemaps maps char** arguments from a Vector
+ * Typemaps maps char** arguments from a List
  ***************************************************/
 
 %typemap(in) char **options
@@ -949,27 +949,22 @@
   /* %typemap(in) char **options */
   $1 = NULL;
   if($input != 0) {
-    const jclass vector = jenv->FindClass("java/util/Vector");
-    const jclass enumeration = jenv->FindClass("java/util/Enumeration");
+    const jclass arrayList = jenv->FindClass("java/util/ArrayList");
     const jclass stringClass = jenv->FindClass("java/lang/String");
-    const jmethodID elements = jenv->GetMethodID(vector, "elements",
-      "()Ljava/util/Enumeration;");
-    const jmethodID hasMoreElements = jenv->GetMethodID(enumeration, 
-      "hasMoreElements", "()Z");
-    const jmethodID getNextElement = jenv->GetMethodID(enumeration,
-      "nextElement", "()Ljava/lang/Object;");
-    if(vector == NULL || enumeration == NULL || elements == NULL ||
-        hasMoreElements == NULL || getNextElement == NULL) {
+    const jmethodID getElement = jenv->GetMethodID(arrayList, "get", "(I)Ljava/lang/Object;");
+    const jmethodID size = jenv->GetMethodID(arrayList, "size", "()I");
+    int sz = jenv->CallIntMethod($input, size);
+    
+    if(arrayList == NULL || getElement == NULL) {
           fprintf(stderr, "Could not load (options **) jni types.\n");
           return $null;
         }
-    for (jobject keys = jenv->CallObjectMethod($input, elements);
-          jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
-      jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
+    for (int i = 0; i < sz; i++) {
+      jstring value = (jstring)jenv->CallObjectMethod($input, getElement, i);
       if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
       {
           CSLDestroy($1);
-          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
+          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the list is not a string");
           return $null;
       }
       const char *valptr = jenv->GetStringUTFChars(value, 0);
@@ -985,13 +980,13 @@
 }
 %typemap(out) char **options
 {
-  /* %typemap(out) char ** -> Vector */
+  /* %typemap(out) char ** -> ArrayList */
   char **stringarray = $1;
-  const jclass vector = jenv->FindClass("java/util/Vector");
-  const jmethodID constructor = jenv->GetMethodID(vector, "<init>", "()V");
-  const jmethodID add = jenv->GetMethodID(vector, "add", "(Ljava/lang/Object;)Z");
+  const jclass arrayList = jenv->FindClass("java/util/ArrayList");
+  const jmethodID constructor = jenv->GetMethodID(arrayList, "<init>", "()V");
+  const jmethodID add = jenv->GetMethodID(arrayList, "add", "(Ljava/lang/Object;)Z");
 
-  $result = jenv->NewObject(vector, constructor);
+  $result = jenv->NewObject(arrayList, constructor);
   if ( stringarray != NULL ) {
     while(*stringarray != NULL) {
       /*printf("working on string %s\n", *stringarray);*/
@@ -1004,8 +999,8 @@
 }
 
 %typemap(jni) (char **options) "jobject"
-%typemap(jtype) (char **options) "java.util.Vector"
-%typemap(jstype) (char **options) "java.util.Vector"
+%typemap(jtype) (char **options) "java.util.List"
+%typemap(jstype) (char **options) "java.util.List"
 %typemap(javain) (char **options) "$javainput"
 %typemap(javaout) (char **options) {
     return $jnicall;
@@ -1119,13 +1114,13 @@
 /* but we CSLDestroy the char** pointer at the end */
 %typemap(out) char **out_ppsz_and_free
 {
-  /* %typemap(out) char **out_ppsz_and_free -> vector of strings */
+  /* %typemap(out) char **out_ppsz_and_free -> ArrayList of strings */
   char **stringarray = $1;
-  const jclass vector = jenv->FindClass("java/util/Vector");
-  const jmethodID constructor = jenv->GetMethodID(vector, "<init>", "()V");
-  const jmethodID add = jenv->GetMethodID(vector, "add", "(Ljava/lang/Object;)Z");
+  const jclass arrayList = jenv->FindClass("java/util/ArrayList");
+  const jmethodID constructor = jenv->GetMethodID(arrayList, "<init>", "()V");
+  const jmethodID add = jenv->GetMethodID(arrayList, "add", "(Ljava/lang/Object;)Z");
 
-  $result = jenv->NewObject(vector, constructor);
+  $result = jenv->NewObject(arrayList, constructor);
   if ( stringarray != NULL ) {
     while(*stringarray != NULL) {
       /*printf("working on string %s\n", *stringarray);*/
@@ -1139,8 +1134,8 @@
 }
 
 %typemap(jni) (char **out_ppsz_and_free) "jobject"
-%typemap(jtype) (char **out_ppsz_and_free) "java.util.Vector"
-%typemap(jstype) (char **out_ppsz_and_free) "java.util.Vector"
+%typemap(jtype) (char **out_ppsz_and_free) "java.util.List"
+%typemap(jstype) (char **out_ppsz_and_free) "java.util.List"
 %typemap(javain) (char **out_ppsz_and_free) "$javainput"
 %typemap(javaout) (char **out_ppsz_and_free) {
     return $jnicall;
